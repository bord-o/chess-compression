use bit_vec::BitVec;
use bitbit::reader::BitReader;
use bitbit::writer::BitWriter;
use huffman_compress::{Book, CodeBuilder, Tree};
use itertools::Itertools;
use std::collections::HashMap;
use std::fs::File;
use std::iter::FromIterator;

pub fn encode(write_path: &str, indexes: &Vec<u16>, codebook: Book<u16>) {
    let mut encoded_buf = BitVec::new();

    let wfile = File::create(write_path).ok().unwrap();
    let mut bw = BitWriter::new(wfile);
    for sym in indexes {
        //println!("{}", sym);
        codebook.encode(&mut encoded_buf, sym).unwrap();
    }
    //println!("{}", encoded_buf.len());
    let mut bitcounter = 0;
    for bit in &encoded_buf {
        //println!("{:?}", bit);
        bw.write_bit(bit).unwrap();
        bitcounter += 1;
    }

    // handle EOF padding to preserve non byte aligned codes
    for _p in 0..(8 - (bitcounter % 8)) {
        bitcounter += 1;
        bw.write_bit(false).unwrap();
    }

    //println!("{:?} == {}\n", encoded_buf, bitcounter);
}

pub fn decode(read_path: &str, huff_tree: Tree<u16>) -> Vec<u16> {
    let mut bits = BitVec::new();

    let rfile = File::open(read_path).ok().unwrap();
    let mut br: BitReader<_, bitbit::MSB> = BitReader::new(rfile);

    let mut bitcounter = 0;
    loop {
        let bit = match br.read_bit() {
            Err(_e) => break,
            Ok(f) => f,
        };
        bits.push(bit);
        bitcounter += 1;
    }
    let indexes: Vec<u16> = huff_tree.unbounded_decoder(&bits).collect();
    //println!("{:?}", indexes);

    //println!("{:?} {}", bits, bitcounter);
    return indexes;
}

pub fn generate_huff_weights(index_db: &Vec<u16>) -> HashMap<u16, usize> {
    let weights = index_db.clone().into_iter().counts();
    //println!("{:?}", &weights);
    return weights;
}

pub fn huff_gen(frequencies: HashMap<u16, usize>) -> (Book<u16>, Tree<u16>) {
    // let mut weights: HashMap<u16, usize> = HashMap::new();

    let hc_frequencies: HashMap<u16, usize> = HashMap::from([
        (0, 59702781),
        (1, 30721413),
        (2, 19353377),
        (3, 13851683),
        (4, 11383951),
        (5, 9084084),
        (6, 7697156),
        (7, 6857582),
        (8, 6817284),
        (9, 5897575),
        (10, 5363924),
        (11, 5164025),
        (12, 5037195),
        (13, 5051164),
        (14, 5196873),
        (15, 5530209),
        (16, 5221425),
        (17, 6549660),
        (18, 5830636),
        (19, 5176266),
        (20, 5297425),
        (21, 4984120),
        (22, 4467953),
        (23, 4291776),
        (24, 4598017),
        (25, 4257373),
        (26, 4000035),
        (27, 3679709),
        (28, 3335848),
        (29, 3077168),
        (30, 2709615),
        (31, 2518673),
        (32, 2229827),
        (33, 1969953),
        (34, 1756107),
        (35, 1513193),
        (36, 1264472),
        (37, 1052460),
        (38, 887332),
        (39, 733514),
        (40, 589821),
        (41, 478357),
        (42, 373086),
        (43, 289966),
        (44, 224888),
        (45, 172135),
        (46, 127152),
        (47, 95487),
        (48, 70761),
        (49, 49618),
        (50, 36156),
        (51, 25523),
        (52, 17952),
        (53, 12218),
        (54, 8695),
        (55, 5999),
        (56, 4094),
        (57, 2791),
        (58, 1889),
        (59, 1301),
        (60, 903),
        (61, 664),
        (62, 480),
        (63, 339),
        (64, 265),
        (65, 198),
        (66, 154),
        (67, 127),
        (68, 109),
        (69, 89),
        (70, 83),
        (71, 58),
        (72, 61),
        (73, 56),
        (74, 42),
        (75, 31),
        (76, 39),
        (77, 24),
        (78, 33),
        (79, 30),
        (80, 27),
        (81, 14),
        (82, 22),
        (83, 10),
        (84, 10),
        (85, 10),
        (86, 7),
        (87, 7),
        (88, 9),
        (89, 5),
        (90, 5),
        (91, 8),
        (92, 4),
        (93, 7),
        (94, 3),
        (95, 4),
        (96, 1),
        (97, 1),
        (98, 1),
        (99, 3),
        (100, 1),
        (101, 1),
        (102, 1),
        (103, 1),
        (104, 1),
        (105, 1),
        (106, 1),
        (107, 1),
        (108, 1),
        (109, 1),
        (110, 1),
        (111, 1),
        (112, 1),
        (113, 1),
        (114, 1),
        (115, 1),
        (116, 1),
        (117, 1),
        (118, 1),
        (119, 1),
        (120, 1),
        (121, 1),
        (122, 1),
        (123, 1),
        (124, 1),
        (125, 1),
        (126, 1),
        (127, 1),
        (128, 1),
        (129, 1),
        (130, 1),
        (131, 1),
        (132, 1),
        (133, 1),
        (134, 1),
        (135, 1),
        (136, 1),
        (137, 1),
        (138, 1),
        (139, 1),
        (140, 1),
        (141, 1),
        (142, 1),
        (143, 1),
        (144, 1),
        (145, 1),
        (146, 1),
        (147, 1),
        (148, 1),
        (149, 1),
        (150, 1),
        (151, 1),
        (152, 1),
        (153, 1),
        (154, 1),
        (155, 1),
        (156, 1),
        (157, 1),
        (158, 1),
        (159, 1),
        (160, 1),
        (161, 1),
        (162, 1),
        (163, 1),
        (164, 1),
        (165, 1),
        (166, 1),
        (167, 1),
        (168, 1),
        (169, 1),
        (170, 1),
        (171, 1),
        (172, 1),
        (173, 1),
        (174, 1),
        (175, 1),
        (176, 1),
        (177, 1),
        (178, 1),
        (179, 1),
        (180, 1),
        (181, 1),
        (182, 1),
        (183, 1),
        (184, 1),
        (185, 1),
        (186, 1),
        (187, 1),
        (188, 1),
        (189, 1),
        (190, 1),
        (191, 1),
        (192, 1),
        (193, 1),
        (194, 1),
        (195, 1),
        (196, 1),
        (197, 1),
        (198, 1),
        (199, 1),
        (200, 1),
        (201, 1),
        (202, 1),
        (203, 1),
        (204, 1),
        (205, 1),
        (206, 1),
        (207, 1),
        (208, 1),
        (209, 1),
        (210, 1),
        (211, 1),
        (212, 1),
        (213, 1),
        (214, 1),
        (215, 1),
        (216, 1),
        (217, 1),
        (218, 1),
        (219, 1),
        (220, 1),
        (221, 1),
        (222, 1),
        (223, 1),
        (224, 1),
        (225, 1),
        (226, 1),
        (227, 1),
        (228, 1),
        (229, 1),
        (230, 1),
        (231, 1),
        (232, 1),
        (233, 1),
        (234, 1),
        (235, 1),
        (236, 1),
        (237, 1),
        (238, 1),
        (239, 1),
        (240, 1),
        (241, 1),
        (242, 1),
        (243, 1),
        (244, 1),
        (245, 1),
        (246, 1),
        (247, 1),
        (248, 1),
        (249, 1),
        (250, 1),
        (251, 1),
        (252, 1),
        (253, 1),
        (254, 1),
        (255, 1),
        (400, 2166465), //win 1-0
        (500, 2021408), //loss 0-1
        (600, 166109),  //draw
    ]);

    let (book, tree) = CodeBuilder::from_iter(&hc_frequencies).finish();
    // for num in hc_frequencies.keys().sorted() {
    //     println!("({:?}, {:?})", num, book.get(&num).unwrap());
    // }
    return (book, tree);
}
// let frequencies: HashMap<u16, usize> = HashMap::from([
//     (0, 59702781),
//     (1, 30721413),
//     (2, 19353377),
//     (3, 13851683),
//     (4, 11383951),
//     (5, 9084084),
//     (6, 7697156),
//     (7, 6857582),
//     (8, 6817284),
//     (9, 5897575),
//     (10, 5363924),
//     (11, 5164025),
//     (12, 5037195),
//     (13, 5051164),
//     (14, 5196873),
//     (15, 5530209),
//     (16, 5221425),
//     (17, 6549660),
//     (18, 5830636),
//     (19, 5176266),
//     (20, 5297425),
//     (21, 4984120),
//     (22, 4467953),
//     (23, 4291776),
//     (24, 4598017),
//     (25, 4257373),
//     (26, 4000035),
//     (27, 3679709),
//     (28, 3335848),
//     (29, 3077168),
//     (30, 2709615),
//     (31, 2518673),
//     (32, 2229827),
//     (33, 1969953),
//     (34, 1756107),
//     (35, 1513193),
//     (36, 1264472),
//     (37, 1052460),
//     (38, 887332),
//     (39, 733514),
//     (40, 589821),
//     (41, 478357),
//     (42, 373086),
//     (43, 289966),
//     (44, 224888),
//     (45, 172135),
//     (46, 127152),
//     (47, 95487),
//     (48, 70761),
//     (49, 49618),
//     (50, 36156),
//     (51, 25523),
//     (52, 17952),
//     (53, 12218),
//     (54, 8695),
//     (55, 5999),
//     (56, 4094),
//     (57, 2791),
//     (58, 1889),
//     (59, 1301),
//     (60, 903),
//     (61, 664),
//     (62, 480),
//     (63, 339),
//     (64, 265),
//     (65, 198),
//     (66, 154),
//     (67, 127),
//     (68, 109),
//     (69, 89),
//     (70, 83),
//     (71, 58),
//     (72, 61),
//     (73, 56),
//     (74, 42),
//     (75, 31),
//     (76, 39),
//     (77, 24),
//     (78, 33),
//     (79, 30),
//     (80, 27),
//     (81, 14),
//     (82, 22),
//     (83, 10),
//     (84, 10),
//     (85, 10),
//     (86, 7),
//     (87, 7),
//     (88, 9),
//     (89, 5),
//     (90, 5),
//     (91, 8),
//     (92, 4),
//     (93, 7),
//     (94, 3),
//     (95, 4),
//     (96, 1),
//     (97, 1),
//     (98, 1),
//     (99, 3),
//     (100, 1),
//     (101, 1),
//     (102, 1),
//     (103, 1),
//     (104, 1),
//     (105, 1),
//     (106, 1),
//     (107, 1),
//     (108, 1),
//     (109, 1),
//     (110, 1),
//     (111, 1),
//     (112, 1),
//     (113, 1),
//     (114, 1),
//     (115, 1),
//     (116, 1),
//     (117, 1),
//     (118, 1),
//     (119, 1),
//     (120, 1),
//     (121, 1),
//     (122, 1),
//     (123, 1),
//     (124, 1),
//     (125, 1),
//     (126, 1),
//     (127, 1),
//     (128, 1),
//     (129, 1),
//     (130, 1),
//     (131, 1),
//     (132, 1),
//     (133, 1),
//     (134, 1),
//     (135, 1),
//     (136, 1),
//     (137, 1),
//     (138, 1),
//     (139, 1),
//     (140, 1),
//     (141, 1),
//     (142, 1),
//     (143, 1),
//     (144, 1),
//     (145, 1),
//     (146, 1),
//     (147, 1),
//     (148, 1),
//     (149, 1),
//     (150, 1),
//     (151, 1),
//     (152, 1),
//     (153, 1),
//     (154, 1),
//     (155, 1),
//     (156, 1),
//     (157, 1),
//     (158, 1),
//     (159, 1),
//     (160, 1),
//     (161, 1),
//     (162, 1),
//     (163, 1),
//     (164, 1),
//     (165, 1),
//     (166, 1),
//     (167, 1),
//     (168, 1),
//     (169, 1),
//     (170, 1),
//     (171, 1),
//     (172, 1),
//     (173, 1),
//     (174, 1),
//     (175, 1),
//     (176, 1),
//     (177, 1),
//     (178, 1),
//     (179, 1),
//     (180, 1),
//     (181, 1),
//     (182, 1),
//     (183, 1),
//     (184, 1),
//     (185, 1),
//     (186, 1),
//     (187, 1),
//     (188, 1),
//     (189, 1),
//     (190, 1),
//     (191, 1),
//     (192, 1),
//     (193, 1),
//     (194, 1),
//     (195, 1),
//     (196, 1),
//     (197, 1),
//     (198, 1),
//     (199, 1),
//     (200, 1),
//     (201, 1),
//     (202, 1),
//     (203, 1),
//     (204, 1),
//     (205, 1),
//     (206, 1),
//     (207, 1),
//     (208, 1),
//     (209, 1),
//     (210, 1),
//     (211, 1),
//     (212, 1),
//     (213, 1),
//     (214, 1),
//     (215, 1),
//     (216, 1),
//     (217, 1),
//     (218, 1),
//     (219, 1),
//     (220, 1),
//     (221, 1),
//     (222, 1),
//     (223, 1),
//     (224, 1),
//     (225, 1),
//     (226, 1),
//     (227, 1),
//     (228, 1),
//     (229, 1),
//     (230, 1),
//     (231, 1),
//     (232, 1),
//     (233, 1),
//     (234, 1),
//     (235, 1),
//     (236, 1),
//     (237, 1),
//     (238, 1),
//     (239, 1),
//     (240, 1),
//     (241, 1),
//     (242, 1),
//     (243, 1),
//     (244, 1),
//     (245, 1),
//     (246, 1),
//     (247, 1),
//     (248, 1),
//     (249, 1),
//     (250, 1),
//     (251, 1),
//     (252, 1),
//     (253, 1),
//     (254, 1),
//     (255, 1),
// ]);
